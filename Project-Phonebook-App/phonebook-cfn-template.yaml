AWSTemplateFormatVersion: "2010-09-09"

Description: |
  CloudFormation Template for Phonebook Application. This template creates Application Load Balancer
  with Auto Scaling Group of Amazon Linux 2 (ami-090e0fc566929d98b) EC2 Instances which host Python Flask Web Application.
  EC2 instances are placed within WebServerSecurityGroup which allows http (80) connections only from ALBSecurityGroup,
  and allows tcp(3306) connections only within itself. RDS DB instance is placed within WebServerSecurityGroup
  so that Database Server can communicate with Web Servers. Application Load Balancer is placed within ALBSecurityGroup
  which allows http (80) connections from anywhere. WebServerASG Auto Scaling Group is using the LT
  Launch Template in order to spin up instances needed. LT Launch Template is configured to prepare Python Flask
  environment on EC2, and to deploy Phonebook Application on Flask Server after downloading the app code
  from Github repository.

Parameters:
  MyKeyPair:
    Description: Choose your key-pair
    Type: AWS::EC2::KeyPair::KeyName

  Subnets:
    Description: Choose at least 2 subnets
    Type: List<AWS::EC2::Subnet::Id>

  VPC:
    Description: Choose one VPC
    Type: AWS::EC2::VPC::Id

Resources:
  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        !GetAZs ""
      DesiredCapacity: 2
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref MyTemplate
        Version: !GetAtt MyTemplate.LatestVersionNumber
      MaxSize: 3
      MinSize: 1
      TargetGroupARNs:
        - !Ref TG

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: # Required
        - TargetGroupArn: !Ref TG # !Getatt MyTargetGroup.TargetGroupArn
          Type: forward
      LoadBalancerArn: !Ref MyELB
      Port: 80
      Protocol: HTTP

  MyELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt ALBsecurityGroup.GroupId #!Ref MySecGrp
      Subnets: !Ref Subnets
      Type: application

  MyTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-090e0fc566929d98b
        InstanceType: t2.micro
        KeyName: !Ref MyKeyPair
        SecurityGroupIds:
          - !GetAtt AmaurySecGrp.GroupId #!Ref MySecGrp
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: Web Server of Emre-Phonebook Stack
        UserData:
          Fn::Base64: 
            !Sub
              - |
                #!/bin/bash
                yum update -y
                yum install python3 -y
                pip3 install flask
                pip3 install flask_mysql
                echo "${MyDBURI}" > /home/ec2-user/dbserver.endpoint
                TOKEN="^#personalgithubtoken"
                FOLDER="https://$TOKEN@raw.githubusercontent.com/Sipcensky/Aws-phonebook-app/main/Project-Phonebook-App/"
                curl -s --create-dirs -o "/home/ec2-user/templates/index.html" -L "$FOLDER"/templates/index.html
                curl -s --create-dirs -o "/home/ec2-user/templates/add-update.html" -L "$FOLDER"/templates/add-update.html
                curl -s --create-dirs -o "/home/ec2-user/templates/delete.html" -L "$FOLDER"/templates/delete.html
                curl -s --create-dirs -o "/home/ec2-user/app.py" -L "$FOLDER"/phonebook-app.py
                python3 /home/ec2-user/app.py
              - MyDBURI: !GetAtt DBInstance.Endpoint.Address

  ALBsecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP for Application Load Balancer # Required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  AmaurySecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP for Flask Web Server and SSH for getting into EC2 # Required
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  TG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      DBSecurityGroupIngress: # Required
        - EC2SecurityGroupId: !GetAtt AmaurySecGrp.GroupId
      GroupDescription: Back-end Database # Required

  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: false
      BackupRetentionPeriod: 0
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: phonebook-app
      DBName: clarusway_phonebook
      DBSecurityGroups:
        - !Ref DBSecurityGroup
      Engine: MySQL
      EngineVersion: 8.0.32
      MasterUsername: admin
      MasterUserPassword: clarusway_1234
      Port: 3306
      PubliclyAccessible: true

Outputs:
  WebsiteURL:
    Value: !Sub
      - http://${ALBAddress}
      - ALBAddress: !GetAtt MyELB.DNSName
    Description: Phonebook Application Load Balancer URL
